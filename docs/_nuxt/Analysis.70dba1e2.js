var u=Object.defineProperty;var c=(i,e,s)=>e in i?u(i,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[e]=s;var g=(i,e,s)=>(c(i,typeof e!="symbol"?e+"":e,s),s);class d{constructor(e,s){g(this,"name","No name");this.rangeStart=e.rangeStart,this.rangeFinal=e.rangeFinal,this.rangePerRow=e.rangePerRow,this.goods=[],this.bads=[],Array.isArray(s)&&typeof e=="object"&&this.onInit(e,s)}onInit(e,s){}getRawNumbers(e,s=0,r=5){let a=[];for(let n=s;n<r;n++)typeof e[n]>"u"||e[n].numbers.forEach(o=>a.push(o));return a}}class f extends d{constructor(){super(...arguments);g(this,"name","Mais e menos prov\xE1veis")}onInit(s,r){this.getGoods(5,r,s),this.getBads(5,r)}getGoods(s,r,a){let n={};for(let t=a.rangeStart;t<=a.rangeFinal;t++)n[t]=0;this.getRawNumbers(a,0,s).forEach(t=>{n[t]++});let o=[];for(let t in n)n[t]>0||o.push(parseInt(t));this.goods=o}getBads(s,r){const a=o=>o.filter((t,h)=>o.indexOf(t)!==h);let n=this.getRawNumbers(r,0,s);this.bads=a(n)}}class l{constructor(e,s){this.average={goods:[],bads:[]},this.types=[new f(e,s)]}}export{l as default};
