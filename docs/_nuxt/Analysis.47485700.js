var p=Object.defineProperty;var v=(i,e,s)=>e in i?p(i,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[e]=s;var a=(i,e,s)=>(v(i,typeof e!="symbol"?e+"":e,s),s);class y{constructor(e,s){a(this,"name","No name");this.tests=[],this.goods=[],this.bads=[],Array.isArray(s)&&typeof e=="object"&&(this.onInit(e,s),this.goods=this.getGoods(e,s),this.bads=this.getBads(e,s),this.tests=this.getTests(e,s))}onInit(e,s){}getRawNumbers(e,s=0,t=5){let o=[];for(let r=s;r<t;r++)typeof e[r]>"u"||e[r].numbers.forEach(n=>o.push(n));return o}getTests(e,s){s=s.reverse();let t={goods:{tests:0,success:0,percent:0},bads:{tests:0,success:0,percent:0}};for(let o=0;o<=s.length;o++){let r=s.filter((g,u)=>u<=o);if(r.length==0)continue;let n=s[o+1]||!1;if(!n)continue;const c=(g,u)=>{const f=new Set(u);return[...new Set(g)].filter(m=>f.has(m))};let d=this.getGoods(e,r),h=c(d,n.numbers);t.goods.tests++,h.length>0&&t.goods.success++;let l=this.getBads(e,r),b=c(l,n.numbers);t.bads.tests++,b.length>0&&t.bads.success++}return t.goods.percent=100*t.goods.success/t.goods.tests,t.bads.percent=100*t.bads.success/t.bads.tests,[{name:'Previsão de "Numeros bons" contendo acertos',percent:t.goods.percent},{name:'Previsão de "Numeros ruins" contendo acertos',percent:t.bads.percent}]}}class N extends y{constructor(){super(...arguments);a(this,"name","Mais provaveis dos últimos 3 sorteios, menos provaveis dos últimos 10 sorteios");a(this,"rangeSizeGoods",3);a(this,"rangeSizeBads",10)}getGoods(s,t){let o={};for(let n=s.rangeStart;n<=s.rangeFinal;n++)o[n]=0;this.getRawNumbers(t,0,this.rangeSizeGoods).forEach(n=>{o[n]++});let r=[];for(let n in o)o[n]>0||r.push(parseInt(n));return r}getBads(s,t){const o=n=>n.filter((c,d)=>n.indexOf(c)!==d);let r=this.getRawNumbers(t,0,this.rangeSizeBads);return o(r)}}class w{constructor(e,s){this.types=[new N(e,s)]}}export{w as default};
